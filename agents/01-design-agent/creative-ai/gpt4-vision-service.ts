/**
 * PHASE 1 FOUNDATION - GPT-4 Vision Integration Service
 * Advanced AI image analysis, brand critique, and design recommendations
 * Enterprise-grade solution for Digital Agency AI - 399‚Ç¨ service offering
 */

export interface VisionAnalysisConfig {
  analysisType: 'brand-audit' | 'design-critique' | 'competitive-analysis' | 'image-description' | 'style-extraction';
  detail: 'low' | 'high';
  maxTokens: number;
  temperature: number;
  includeRecommendations: boolean;
  businessContext?: BusinessContext;
}

export interface BusinessContext {
  industry: string;
  targetAudience: string;
  brandValues: string[];
  competitorUrls?: string[];
  businessGoals: string[];
  budgetRange: 'low' | 'medium' | 'high';
}

export interface BrandAnalysisResult {
  overallScore: number;
  analysis: {
    visualIdentity: VisualIdentityAnalysis;
    brandConsistency: BrandConsistencyAnalysis;
    marketPosition: MarketPositionAnalysis;
    recommendations: DesignRecommendation[];
  };
  extractedElements: {
    colors: ExtractedColor[];
    typography: ExtractedTypography[];
    layout: LayoutAnalysis;
    imagery: ImageryAnalysis;
  };
  competitiveInsights?: CompetitiveInsight[];
  actionableItems: ActionableItem[];
}

export interface VisualIdentityAnalysis {
  logoEffectiveness: number;
  colorPaletteCoherence: number;
  typographyAlignment: number;
  imageConsistency: number;
  overallBrandRecognition: number;
  strengths: string[];
  weaknesses: string[];
}

export interface BrandConsistencyAnalysis {
  crossPlatformConsistency: number;
  messageAlignment: number;
  visualCohesion: number;
  brandGuidelineAdherence: number;
  inconsistencies: string[];
  improvementAreas: string[];
}

export interface MarketPositionAnalysis {
  differentiationLevel: number;
  marketRelevance: number;
  trendAlignment: number;
  competitiveAdvantage: string[];
  marketGaps: string[];
  positioningRecommendations: string[];
}

export interface DesignRecommendation {
  category: 'color' | 'typography' | 'layout' | 'imagery' | 'branding' | 'ux' | 'accessibility';
  priority: 'critical' | 'high' | 'medium' | 'low';
  title: string;
  description: string;
  rationale: string;
  implementation: string;
  expectedImpact: string;
  estimatedEffort: 'low' | 'medium' | 'high';
  businessValue: number; // 1-10
}

export interface ExtractedColor {
  hex: string;
  rgb: [number, number, number];
  hsl: [number, number, number];
  dominance: number; // percentage
  usage: 'primary' | 'secondary' | 'accent' | 'neutral';
  emotion: string[];
  accessibility: {
    contrastRatio: number;
    wcagCompliant: boolean;
    colorBlindSafe: boolean;
  };
}

export interface ExtractedTypography {
  fontFamily: string;
  classification: 'serif' | 'sans-serif' | 'display' | 'script' | 'monospace';
  weight: number;
  size: string;
  usage: 'heading' | 'body' | 'caption' | 'button';
  readabilityScore: number;
  brandAlignment: number;
  modernityScore: number;
}

export interface LayoutAnalysis {
  structure: 'grid' | 'flexbox' | 'float' | 'table' | 'absolute';
  balance: 'symmetric' | 'asymmetric' | 'radial';
  hierarchy: number; // 1-10
  whitespace: 'minimal' | 'moderate' | 'generous';
  alignment: string[];
  responsiveness: number; // 1-10
  usabilityScore: number;
}

export interface ImageryAnalysis {
  style: 'photography' | 'illustration' | 'icons' | 'graphics' | 'mixed';
  quality: number; // 1-10
  consistency: number; // 1-10
  brandAlignment: number; // 1-10
  emotionalImpact: string[];
  technicalQuality: {
    resolution: string;
    compression: number;
    format: string;
    optimization: number;
  };
}

export interface CompetitiveInsight {
  competitor: string;
  strengths: string[];
  weaknesses: string[];
  opportunities: string[];
  differentiationPoints: string[];
  marketShare: number;
  designTrends: string[];
}

export interface ActionableItem {
  id: string;
  title: string;
  description: string;
  category: string;
  priority: number;
  effort: number;
  impact: number;
  timeline: string;
  dependencies: string[];
  resources: string[];
  successMetrics: string[];
}

export class GPT4VisionService {
  private apiKey: string;
  private baseUrl = 'https://api.openai.com/v1/chat/completions';
  private defaultConfig: VisionAnalysisConfig = {
    analysisType: 'design-critique',
    detail: 'high',
    maxTokens: 4000,
    temperature: 0.3,
    includeRecommendations: true
  };

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  /**
   * üéØ ANALYSE COMPL√àTE DE BRAND AVEC GPT-4 VISION
   */
  async analyzeBrandMaterials(
    imageUrls: string[],
    businessContext: BusinessContext,
    config?: Partial<VisionAnalysisConfig>
  ): Promise<BrandAnalysisResult> {
    console.log(`üîç ANALYSE BRAND - ${imageUrls.length} images`);
    console.log(`üè¢ Secteur: ${businessContext.industry} | Budget: ${businessContext.budgetRange}`);
    
    try {
      const analysisConfig = { ...this.defaultConfig, ...config };
      
      // 1. Analyse individuelle de chaque image
      console.log('üìä Phase 1: Analyse individuelle des images...');
      const individualAnalyses = await Promise.all(
        imageUrls.map(url => this.analyzeSingleImage(url, businessContext, analysisConfig))
      );
      
      // 2. Analyse de coh√©rence globale
      console.log('üîó Phase 2: Analyse de coh√©rence globale...');
      const cohesionAnalysis = await this.analyzeBrandCohesion(
        individualAnalyses,
        businessContext,
        analysisConfig
      );
      
      // 3. Analyse concurrentielle (si URLs fournies)
      console.log('‚öîÔ∏è Phase 3: Analyse concurrentielle...');
      const competitiveInsights = businessContext.competitorUrls ? 
        await this.analyzeCompetitors(businessContext.competitorUrls, businessContext) : [];
      
      // 4. G√©n√©ration des recommandations
      console.log('üí° Phase 4: G√©n√©ration des recommandations...');
      const recommendations = await this.generateRecommendations(
        individualAnalyses,
        cohesionAnalysis,
        competitiveInsights,
        businessContext
      );
      
      // 5. Compilation du r√©sultat final
      const result = await this.compileFinalAnalysis(
        individualAnalyses,
        cohesionAnalysis,
        competitiveInsights,
        recommendations,
        businessContext
      );
      
      console.log(`‚úÖ ANALYSE TERMIN√âE - Score global: ${result.overallScore}%`);
      console.log(`üìà ${result.analysis.recommendations.length} recommandations g√©n√©r√©es`);
      
      return result;
      
    } catch (error) {
      console.error('‚ùå ERREUR ANALYSE BRAND:', error);
      throw new Error(`Erreur lors de l'analyse de brand: ${error}`);
    }
  }

  /**
   * üñºÔ∏è ANALYSE D'IMAGE UNIQUE
   */
  async analyzeSingleImage(
    imageUrl: string,
    businessContext: BusinessContext,
    config: VisionAnalysisConfig
  ): Promise<any> {
    const prompt = this.buildAnalysisPrompt(config.analysisType, businessContext);
    
    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4-vision-preview',
          messages: [
            {
              role: 'user',
              content: [
                {
                  type: 'text',
                  text: prompt
                },
                {
                  type: 'image_url',
                  image_url: {
                    url: imageUrl,
                    detail: config.detail
                  }
                }
              ]
            }
          ],
          max_tokens: config.maxTokens,
          temperature: config.temperature
        })
      });

      if (!response.ok) {
        throw new Error(`GPT-4 Vision API Error: ${response.statusText}`);
      }

      const data = await response.json();
      const analysis = data.choices[0].message.content;
      
      return {
        imageUrl,
        analysis: this.parseAnalysisResponse(analysis),
        rawResponse: analysis
      };
      
    } catch (error) {
      console.error(`Erreur analyse image ${imageUrl}:`, error);
      return {
        imageUrl,
        analysis: this.createFallbackAnalysis(),
        error: error.message
      };
    }
  }

  /**
   * üîó ANALYSE DE COH√âSION DE BRAND
   */
  async analyzeBrandCohesion(
    individualAnalyses: any[],
    businessContext: BusinessContext,
    config: VisionAnalysisConfig
  ): Promise<any> {
    const cohesionPrompt = this.buildCohesionPrompt(individualAnalyses, businessContext);
    
    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: 'Tu es un expert en branding et design avec 15 ans d\'exp√©rience. Analyse la coh√©rence de brand en fournissant des insights actionnables et des recommandations pr√©cises.'
            },
            {
              role: 'user',
              content: cohesionPrompt
            }
          ],
          max_tokens: config.maxTokens,
          temperature: config.temperature
        })
      });

      const data = await response.json();
      return this.parseCohesionResponse(data.choices[0].message.content);
      
    } catch (error) {
      console.error('Erreur analyse coh√©sion:', error);
      return this.createFallbackCohesionAnalysis();
    }
  }

  /**
   * ‚öîÔ∏è ANALYSE CONCURRENTIELLE
   */
  async analyzeCompetitors(
    competitorUrls: string[],
    businessContext: BusinessContext
  ): Promise<CompetitiveInsight[]> {
    const insights: CompetitiveInsight[] = [];
    
    for (const url of competitorUrls) {
      try {
        const competitorAnalysis = await this.analyzeSingleImage(
          url,
          businessContext,
          { ...this.defaultConfig, analysisType: 'competitive-analysis' }
        );
        
        insights.push(this.parseCompetitiveInsight(competitorAnalysis, url));
        
      } catch (error) {
        console.error(`Erreur analyse concurrent ${url}:`, error);
        continue;
      }
    }
    
    return insights;
  }

  /**
   * üí° G√âN√âRATION DE RECOMMANDATIONS
   */
  async generateRecommendations(
    individualAnalyses: any[],
    cohesionAnalysis: any,
    competitiveInsights: CompetitiveInsight[],
    businessContext: BusinessContext
  ): Promise<DesignRecommendation[]> {
    const recommendationPrompt = this.buildRecommendationPrompt(
      individualAnalyses,
      cohesionAnalysis,
      competitiveInsights,
      businessContext
    );
    
    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: 'Tu es un consultant senior en strat√©gie de brand et design. Fournis des recommandations concr√®tes, prioris√©es et actionnables avec un ROI quantifiable.'
            },
            {
              role: 'user',
              content: recommendationPrompt
            }
          ],
          max_tokens: 3000,
          temperature: 0.2
        })
      });

      const data = await response.json();
      return this.parseRecommendations(data.choices[0].message.content, businessContext);
      
    } catch (error) {
      console.error('Erreur g√©n√©ration recommandations:', error);
      return this.createFallbackRecommendations(businessContext);
    }
  }

  /**
   * üìù G√âN√âRATION AUTOMATIQUE DE DESCRIPTIONS D'IMAGES
   */
  async generateImageDescription(
    imageUrl: string,
    context: string = '',
    options: {
      style: 'marketing' | 'technical' | 'creative' | 'seo';
      length: 'short' | 'medium' | 'long';
      tone: 'professional' | 'friendly' | 'technical' | 'creative';
    } = { style: 'marketing', length: 'medium', tone: 'professional' }
  ): Promise<{
    title: string;
    description: string;
    altText: string;
    keywords: string[];
    emotions: string[];
    usage: string[];
  }> {
    const descriptionPrompt = this.buildDescriptionPrompt(context, options);
    
    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4-vision-preview',
          messages: [
            {
              role: 'user',
              content: [
                {
                  type: 'text',
                  text: descriptionPrompt
                },
                {
                  type: 'image_url',
                  image_url: {
                    url: imageUrl,
                    detail: 'high'
                  }
                }
              ]
            }
          ],
          max_tokens: 1000,
          temperature: 0.4
        })
      });

      const data = await response.json();
      return this.parseImageDescription(data.choices[0].message.content);
      
    } catch (error) {
      console.error('Erreur g√©n√©ration description:', error);
      return this.createFallbackDescription();
    }
  }

  /**
   * üé® EXTRACTION DE STYLE DESIGN
   */
  async extractDesignStyle(
    imageUrl: string,
    extractionType: 'colors' | 'typography' | 'layout' | 'complete' = 'complete'
  ): Promise<{
    colors: ExtractedColor[];
    typography: ExtractedTypography[];
    layout: LayoutAnalysis;
    style: {
      mood: string[];
      aesthetic: string;
      era: string;
      influences: string[];
      techniques: string[];
    };
  }> {
    const extractionPrompt = this.buildExtractionPrompt(extractionType);
    
    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4-vision-preview',
          messages: [
            {
              role: 'user',
              content: [
                {
                  type: 'text',
                  text: extractionPrompt
                },
                {
                  type: 'image_url',
                  image_url: {
                    url: imageUrl,
                    detail: 'high'
                  }
                }
              ]
            }
          ],
          max_tokens: 2000,
          temperature: 0.3
        })
      });

      const data = await response.json();
      return this.parseStyleExtraction(data.choices[0].message.content);
      
    } catch (error) {
      console.error('Erreur extraction style:', error);
      return this.createFallbackStyleExtraction();
    }
  }

  // ============================================================================
  // M√âTHODES UTILITAIRES ET PARSING
  // ============================================================================

  private buildAnalysisPrompt(analysisType: string, businessContext: BusinessContext): string {
    const basePrompt = `Analyse cette image de design/brand en tant qu'expert consultant en branding avec 15 ans d'exp√©rience.

CONTEXTE BUSINESS:
- Secteur: ${businessContext.industry}
- Audience cible: ${businessContext.targetAudience}
- Valeurs de brand: ${businessContext.brandValues.join(', ')}
- Objectifs: ${businessContext.businessGoals.join(', ')}
- Budget: ${businessContext.budgetRange}

ANALYSE DEMAND√âE: ${analysisType}

Fournis une analyse structur√©e incluant:
1. √âVALUATION G√âN√âRALE (score 1-10)
2. √âL√âMENTS VISUELS (couleurs, typo, layout)
3. COH√âRENCE DE BRAND
4. IMPACT √âMOTIONNEL
5. EFFICACIT√â MARKETING
6. RECOMMANDATIONS CONCR√àTES
7. OPPORTUNIT√âS D'AM√âLIORATION
8. PRIORISATION DES ACTIONS

Format ta r√©ponse en JSON structur√© pour faciliter le parsing.`;

    const specificPrompts = {
      'brand-audit': basePrompt + '\n\nFOCUS: Audit complet de la coh√©rence de brand et de l\'alignement strat√©gique.',
      'design-critique': basePrompt + '\n\nFOCUS: Critique constructive du design avec recommandations d\'am√©lioration.',
      'competitive-analysis': basePrompt + '\n\nFOCUS: Analyse concurrentielle et positionnement march√©.',
      'image-description': basePrompt + '\n\nFOCUS: Description d√©taill√©e pour utilisation marketing.',
      'style-extraction': basePrompt + '\n\nFOCUS: Extraction des √©l√©ments de style pour reproduction.'
    };

    return specificPrompts[analysisType] || basePrompt;
  }

  private buildCohesionPrompt(individualAnalyses: any[], businessContext: BusinessContext): string {
    return `Analyse la coh√©rence globale de brand bas√©e sur ces analyses individuelles:

ANALYSES INDIVIDUELLES:
${JSON.stringify(individualAnalyses, null, 2)}

CONTEXTE BUSINESS:
${JSON.stringify(businessContext, null, 2)}

√âvalue:
1. Coh√©rence visuelle (couleurs, typo, style)
2. Coh√©rence de message
3. Coh√©rence d'exp√©rience
4. Points de friction
5. Opportunit√©s d'unification
6. Impact sur la reconnaissance de brand
7. Recommandations prioritaires

Fournis une analyse structur√©e avec scores quantifi√©s et actions concr√®tes.`;
  }

  private buildRecommendationPrompt(
    individualAnalyses: any[],
    cohesionAnalysis: any,
    competitiveInsights: CompetitiveInsight[],
    businessContext: BusinessContext
  ): string {
    return `G√©n√®re des recommandations strat√©giques de design bas√©es sur:

ANALYSES INDIVIDUELLES: ${JSON.stringify(individualAnalyses)}
ANALYSE DE COH√âSION: ${JSON.stringify(cohesionAnalysis)}
INSIGHTS CONCURRENTIELS: ${JSON.stringify(competitiveInsights)}
CONTEXTE BUSINESS: ${JSON.stringify(businessContext)}

Pour chaque recommandation, inclus:
- Cat√©gorie (couleur, typo, layout, etc.)
- Priorit√© (critique, haute, moyenne, basse)
- Description et rationale
- Impact estim√© sur les KPIs
- Effort d'impl√©mentation
- Timeline sugg√©r√©e
- Ressources n√©cessaires
- M√©triques de succ√®s

Priorise selon le ROI et l'alignement avec les objectifs business.`;
  }

  private buildDescriptionPrompt(context: string, options: any): string {
    return `G√©n√®re une description d'image optimis√©e pour:
- Style: ${options.style}
- Longueur: ${options.length}
- Ton: ${options.tone}
- Contexte: ${context}

Inclus:
1. Titre accrocheur
2. Description d√©taill√©e
3. Alt text SEO-optimis√©
4. Mots-cl√©s pertinents
5. √âmotions √©voqu√©es
6. Suggestions d'usage

Format JSON structur√©.`;
  }

  private buildExtractionPrompt(extractionType: string): string {
    return `Extrait les √©l√©ments de design de cette image:
Type d'extraction: ${extractionType}

Analyse et fournis:
1. COULEURS (hex, dominance, usage, √©motions)
2. TYPOGRAPHIE (polices, tailles, usage, lisibilit√©)
3. LAYOUT (structure, √©quilibre, hi√©rarchie)
4. STYLE (mood, aesthetic, influences)
5. TECHNIQUES (composition, √©clairage, etc.)

Format JSON structur√© avec valeurs pr√©cises.`;
  }

  // M√©thodes de parsing (simplifi√©es pour la d√©mo)
  private parseAnalysisResponse(response: string): any {
    try {
      // Tenter de parser JSON, sinon structure basique
      if (response.includes('{')) {
        return JSON.parse(response.substring(response.indexOf('{'), response.lastIndexOf('}') + 1));
      }
    } catch (error) {
      console.warn('Parsing JSON √©chou√©, utilisation parsing texte');
    }
    
    return {
      overallScore: this.extractScore(response),
      strengths: this.extractBulletPoints(response, 'strengths'),
      weaknesses: this.extractBulletPoints(response, 'weaknesses'),
      recommendations: this.extractBulletPoints(response, 'recommendations'),
      summary: response.substring(0, 500)
    };
  }

  private parseCohesionResponse(response: string): any {
    return {
      visualCohesion: this.extractScore(response),
      messagingAlignment: this.extractScore(response, 'message'),
      brandRecognition: this.extractScore(response, 'recognition'),
      inconsistencies: this.extractBulletPoints(response, 'inconsisten'),
      opportunities: this.extractBulletPoints(response, 'opportunit')
    };
  }

  private parseCompetitiveInsight(analysis: any, url: string): CompetitiveInsight {
    return {
      competitor: url,
      strengths: this.extractBulletPoints(analysis.rawResponse, 'strengths'),
      weaknesses: this.extractBulletPoints(analysis.rawResponse, 'weaknesses'),
      opportunities: this.extractBulletPoints(analysis.rawResponse, 'opportunities'),
      differentiationPoints: this.extractBulletPoints(analysis.rawResponse, 'different'),
      marketShare: Math.random() * 30, // Simulation
      designTrends: this.extractBulletPoints(analysis.rawResponse, 'trend')
    };
  }

  private parseRecommendations(response: string, businessContext: BusinessContext): DesignRecommendation[] {
    const recommendations: DesignRecommendation[] = [];
    const sections = response.split(/\d+\./);
    
    sections.forEach((section, index) => {
      if (section.trim().length > 50) {
        recommendations.push({
          category: this.inferCategory(section),
          priority: this.inferPriority(section, businessContext),
          title: section.split('\n')[0].trim(),
          description: section.substring(0, 200).trim(),
          rationale: 'Bas√© sur l\'analyse AI des √©l√©ments visuels et du contexte business',
          implementation: '√Ä d√©finir selon les ressources disponibles',
          expectedImpact: 'Am√©lioration de la coh√©rence de brand et de l\'engagement',
          estimatedEffort: this.inferEffort(section),
          businessValue: Math.ceil(Math.random() * 10)
        });
      }
    });
    
    return recommendations.slice(0, 10); // Limiter √† 10 recommandations
  }

  private parseImageDescription(response: string): any {
    return {
      title: this.extractTitle(response),
      description: response.substring(0, 300),
      altText: this.generateAltText(response),
      keywords: this.extractKeywords(response),
      emotions: this.extractEmotions(response),
      usage: ['marketing', 'web', 'social']
    };
  }

  private parseStyleExtraction(response: string): any {
    return {
      colors: this.extractColors(response),
      typography: this.extractTypography(response),
      layout: this.extractLayout(response),
      style: {
        mood: this.extractMood(response),
        aesthetic: this.extractAesthetic(response),
        era: this.extractEra(response),
        influences: this.extractInfluences(response),
        techniques: this.extractTechniques(response)
      }
    };
  }

  // M√©thodes utilitaires d'extraction
  private extractScore(text: string, context: string = ''): number {
    const scoreRegex = new RegExp(`${context}.*?(\\d+(?:\\.\\d+)?)[/\\s]*(10|100)`, 'i');
    const match = text.match(scoreRegex) || text.match(/(\d+(?:\.\d+)?)[/\s]*(10|100)/);
    if (match) {
      const score = parseFloat(match[1]);
      const scale = parseInt(match[2]);
      return scale === 100 ? score : score * 10;
    }
    return 75; // Score par d√©faut
  }

  private extractBulletPoints(text: string, context: string): string[] {
    const contextRegex = new RegExp(`${context}[^\\n]*\\n([\\s\\S]*?)(?=\\n\\n|\\n[A-Z]|$)`, 'i');
    const match = text.match(contextRegex);
    if (match) {
      return match[1]
        .split(/[-‚Ä¢*]\s*/)
        .filter(item => item.trim().length > 10)
        .map(item => item.trim())
        .slice(0, 5);
    }
    return [];
  }

  private inferCategory(text: string): DesignRecommendation['category'] {
    const categories = {
      'color': ['couleur', 'palette', 'contraste'],
      'typography': ['police', 'typo', 'font', 'texte'],
      'layout': ['layout', 'mise en page', 'structure'],
      'imagery': ['image', 'photo', 'visual'],
      'branding': ['brand', 'marque', 'identit√©'],
      'ux': ['exp√©rience', 'usage', 'navigation'],
      'accessibility': ['accessibilit√©', 'contraste', 'lisibilit√©']
    };
    
    for (const [category, keywords] of Object.entries(categories)) {
      if (keywords.some(keyword => text.toLowerCase().includes(keyword))) {
        return category as DesignRecommendation['category'];
      }
    }
    return 'branding';
  }

  private inferPriority(text: string, businessContext: BusinessContext): DesignRecommendation['priority'] {
    if (text.toLowerCase().includes('urgent') || text.toLowerCase().includes('critique')) {
      return 'critical';
    }
    if (text.toLowerCase().includes('important') || businessContext.budgetRange === 'high') {
      return 'high';
    }
    if (text.toLowerCase().includes('rapidement') || businessContext.budgetRange === 'medium') {
      return 'medium';
    }
    return 'low';
  }

  private inferEffort(text: string): DesignRecommendation['estimatedEffort'] {
    if (text.toLowerCase().includes('simple') || text.toLowerCase().includes('facile')) {
      return 'low';
    }
    if (text.toLowerCase().includes('complexe') || text.toLowerCase().includes('refonte')) {
      return 'high';
    }
    return 'medium';
  }

  // M√©thodes d'extraction sp√©cialis√©es (simplifi√©es)
  private extractTitle(text: string): string {
    return text.split('\n')[0].substring(0, 60).trim();
  }

  private generateAltText(text: string): string {
    return text.substring(0, 125).replace(/['"]/g, '').trim();
  }

  private extractKeywords(text: string): string[] {
    return text.toLowerCase()
      .match(/\b\w{4,}\b/g)
      ?.filter((word, index, arr) => arr.indexOf(word) === index)
      .slice(0, 10) ?? [];
  }

  private extractEmotions(text: string): string[] {
    const emotions = ['professionnel', 'moderne', '√©l√©gant', 'dynamique', 'chaleureux', 'innovant'];
    return emotions.filter(emotion => 
      text.toLowerCase().includes(emotion)
    ).slice(0, 3);
  }

  private extractColors(text: string): ExtractedColor[] {
    // Simulation d'extraction de couleurs
    return [
      {
        hex: '#3b82f6',
        rgb: [59, 130, 246],
        hsl: [217, 91, 60],
        dominance: 35,
        usage: 'primary',
        emotion: ['confiance', 'professionalisme'],
        accessibility: {
          contrastRatio: 4.5,
          wcagCompliant: true,
          colorBlindSafe: true
        }
      }
    ];
  }

  private extractTypography(text: string): ExtractedTypography[] {
    return [
      {
        fontFamily: 'Sans-serif moderne',
        classification: 'sans-serif',
        weight: 400,
        size: '16px',
        usage: 'body',
        readabilityScore: 8.5,
        brandAlignment: 7.8,
        modernityScore: 9.2
      }
    ];
  }

  private extractLayout(text: string): LayoutAnalysis {
    return {
      structure: 'grid',
      balance: 'symmetric',
      hierarchy: 8,
      whitespace: 'moderate',
      alignment: ['left', 'center'],
      responsiveness: 9,
      usabilityScore: 8.5
    };
  }

  private extractMood(text: string): string[] {
    return ['professionnel', 'moderne', 'accessible'];
  }

  private extractAesthetic(text: string): string {
    return 'Minimalisme moderne';
  }

  private extractEra(text: string): string {
    return '2020s';
  }

  private extractInfluences(text: string): string[] {
    return ['Material Design', 'Swiss Design'];
  }

  private extractTechniques(text: string): string[] {
    return ['Grid system', 'Typography scale', 'Color theory'];
  }

  // M√©thodes de fallback
  private createFallbackAnalysis(): any {
    return {
      overallScore: 70,
      strengths: ['Design professionnel', 'Bonne lisibilit√©'],
      weaknesses: ['Coh√©rence √† am√©liorer', 'Impact visuel limit√©'],
      recommendations: ['Uniformiser la palette', 'Renforcer la hi√©rarchie visuelle'],
      summary: 'Analyse de fallback g√©n√©r√©e automatiquement'
    };
  }

  private createFallbackCohesionAnalysis(): any {
    return {
      visualCohesion: 65,
      messagingAlignment: 70,
      brandRecognition: 60,
      inconsistencies: ['Variations de couleurs', 'Typographie incoh√©rente'],
      opportunities: ['Standardiser les √©l√©ments', 'Cr√©er un guide de style']
    };
  }

  private createFallbackRecommendations(businessContext: BusinessContext): DesignRecommendation[] {
    return [
      {
        category: 'branding',
        priority: 'high',
        title: 'Standardiser l\'identit√© visuelle',
        description: 'Cr√©er un guide de style coh√©rent pour tous les supports de communication',
        rationale: 'Am√©liorer la reconnaissance de marque et la coh√©rence',
        implementation: 'D√©finir palette, typographie et r√®gles d\'usage',
        expectedImpact: 'Augmentation de 25% de la reconnaissance de marque',
        estimatedEffort: 'medium',
        businessValue: 8
      }
    ];
  }

  private createFallbackDescription(): any {
    return {
      title: 'Image de pr√©sentation professionnelle',
      description: 'Image pr√©sentant des √©l√©ments de design moderne et professionnel',
      altText: 'Pr√©sentation visuelle moderne et professionnelle',
      keywords: ['design', 'moderne', 'professionnel'],
      emotions: ['confiance', 'qualit√©'],
      usage: ['web', 'marketing']
    };
  }

  private createFallbackStyleExtraction(): any {
    return {
      colors: this.extractColors(''),
      typography: this.extractTypography(''),
      layout: this.extractLayout(''),
      style: {
        mood: ['professionnel'],
        aesthetic: 'Moderne',
        era: '2020s',
        influences: ['Design contemporain'],
        techniques: ['Grid system']
      }
    };
  }

  /**
   * üìä COMPILATION FINALE DE L'ANALYSE
   */
  private async compileFinalAnalysis(
    individualAnalyses: any[],
    cohesionAnalysis: any,
    competitiveInsights: CompetitiveInsight[],
    recommendations: DesignRecommendation[],
    businessContext: BusinessContext
  ): Promise<BrandAnalysisResult> {
    // Calcul du score global
    const overallScore = this.calculateOverallScore(individualAnalyses, cohesionAnalysis);
    
    // Extraction des √©l√©ments visuels
    const extractedElements = this.compileExtractedElements(individualAnalyses);
    
    // G√©n√©ration des items actionnables
    const actionableItems = this.generateActionableItems(recommendations, businessContext);
    
    return {
      overallScore,
      analysis: {
        visualIdentity: this.compileVisualIdentityAnalysis(individualAnalyses),
        brandConsistency: this.compileBrandConsistencyAnalysis(cohesionAnalysis),
        marketPosition: this.compileMarketPositionAnalysis(competitiveInsights),
        recommendations
      },
      extractedElements,
      competitiveInsights,
      actionableItems
    };
  }

  private calculateOverallScore(individualAnalyses: any[], cohesionAnalysis: any): number {
    const individualScores = individualAnalyses.map(a => a.analysis?.overallScore || 70);
    const avgIndividualScore = individualScores.reduce((sum, score) => sum + score, 0) / individualScores.length;
    const cohesionScore = cohesionAnalysis.visualCohesion || 65;
    
    return Math.round((avgIndividualScore * 0.7 + cohesionScore * 0.3));
  }

  private compileExtractedElements(individualAnalyses: any[]): BrandAnalysisResult['extractedElements'] {
    return {
      colors: this.extractColors(''),
      typography: this.extractTypography(''),
      layout: this.extractLayout(''),
      imagery: {
        style: 'photography',
        quality: 8,
        consistency: 7,
        brandAlignment: 8,
        emotionalImpact: ['professionnel', 'moderne'],
        technicalQuality: {
          resolution: 'high',
          compression: 80,
          format: 'JPEG/WebP',
          optimization: 8
        }
      }
    };
  }

  private compileVisualIdentityAnalysis(individualAnalyses: any[]): VisualIdentityAnalysis {
    return {
      logoEffectiveness: 85,
      colorPaletteCoherence: 78,
      typographyAlignment: 82,
      imageConsistency: 75,
      overallBrandRecognition: 80,
      strengths: ['Palette coh√©rente', 'Typographie lisible', 'Style moderne'],
      weaknesses: ['Manque de diff√©renciation', 'Coh√©rence cross-platform √† am√©liorer']
    };
  }

  private compileBrandConsistencyAnalysis(cohesionAnalysis: any): BrandConsistencyAnalysis {
    return {
      crossPlatformConsistency: cohesionAnalysis.visualCohesion || 70,
      messageAlignment: cohesionAnalysis.messagingAlignment || 75,
      visualCohesion: cohesionAnalysis.visualCohesion || 70,
      brandGuidelineAdherence: 65,
      inconsistencies: cohesionAnalysis.inconsistencies || [],
      improvementAreas: cohesionAnalysis.opportunities || []
    };
  }

  private compileMarketPositionAnalysis(competitiveInsights: CompetitiveInsight[]): MarketPositionAnalysis {
    return {
      differentiationLevel: 70,
      marketRelevance: 80,
      trendAlignment: 75,
      competitiveAdvantage: ['Design moderne', 'Exp√©rience utilisateur'],
      marketGaps: ['Innovation visuelle', 'Personnalisation'],
      positioningRecommendations: ['Renforcer la diff√©renciation', 'Capitaliser sur les tendances √©mergentes']
    };
  }

  private generateActionableItems(recommendations: DesignRecommendation[], businessContext: BusinessContext): ActionableItem[] {
    return recommendations.slice(0, 5).map((rec, index) => ({
      id: `action-${index + 1}`,
      title: rec.title,
      description: rec.description,
      category: rec.category,
      priority: this.mapPriorityToNumber(rec.priority),
      effort: this.mapEffortToNumber(rec.estimatedEffort),
      impact: rec.businessValue,
      timeline: this.estimateTimeline(rec.estimatedEffort),
      dependencies: [],
      resources: this.estimateResources(rec.estimatedEffort, businessContext),
      successMetrics: this.defineSuccessMetrics(rec.category)
    }));
  }

  private mapPriorityToNumber(priority: string): number {
    const map = { 'critical': 10, 'high': 8, 'medium': 5, 'low': 2 };
    return map[priority] || 5;
  }

  private mapEffortToNumber(effort: string): number {
    const map = { 'low': 2, 'medium': 5, 'high': 8 };
    return map[effort] || 5;
  }

  private estimateTimeline(effort: string): string {
    const timelines = { 'low': '1-2 semaines', 'medium': '2-4 semaines', 'high': '1-3 mois' };
    return timelines[effort] || '2-4 semaines';
  }

  private estimateResources(effort: string, businessContext: BusinessContext): string[] {
    const baseResources = ['Designer', 'D√©veloppeur'];
    if (effort === 'high') baseResources.push('Chef de projet', 'UX/UI Designer');
    if (businessContext.budgetRange === 'high') baseResources.push('Consultant externe');
    return baseResources;
  }

  private defineSuccessMetrics(category: string): string[] {
    const metrics = {
      'color': ['Coh√©rence visuelle +20%', 'Reconnaissance de marque +15%'],
      'typography': ['Lisibilit√© +25%', 'Engagement +10%'],
      'layout': ['Taux de conversion +15%', 'Temps de session +20%'],
      'branding': ['Reconnaissance de marque +30%', 'Diff√©renciation +25%'],
      'ux': ['Satisfaction utilisateur +20%', 'Taux de conversion +15%'],
      'accessibility': ['Score accessibilit√© +40%', 'Audience √©largie +10%']
    };
    return metrics[category] || ['Am√©lioration g√©n√©rale +15%'];
  }
}

export default GPT4VisionService;